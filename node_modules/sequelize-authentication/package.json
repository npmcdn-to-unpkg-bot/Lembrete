{
  "name": "sequelize-authentication",
  "version": "0.3.0",
  "description": "A connect module for authentication against a database.",
  "main": "lib/index.js",
  "scripts": {
    "test": "node_modules/.bin/buster-test -c buster.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/sequelize/sequelize-authentication.git"
  },
  "author": {
    "name": "Sascha Depold"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "devDependencies": {
    "buster": "~0.6.12",
    "node-uuid": "~1.4.0"
  },
  "dependencies": {
    "connect": "~2.7.2",
    "sequelize": "~1.6.0-beta4"
  },
  "readme": "# sequelize-authentication\n\nA connect module for authentication against a database.\n\n## Build status\n\nThe automated tests we talk about just so much are running on\n[Travis public CI](http://travis-ci.org), here is its status:\n\n[![Build Status](https://secure.travis-ci.org/sequelize/sequelize-authentication.png)](http://travis-ci.org/sequelize/sequelize-authentication)\n\n## Usage\n\n\tvar app            = express()\n\t  , authentication = require('sequelize-authentication')\n\t  , Sequelize      = require('sequelize')\n\t  , sequelize      = new Sequelize('database', 'user', 'password')\n\t\n\tapp.configure(function() {\n\t  // express.static would go here\n\t  app.use(authentication(sequelize[, options]))\n\t  // express router would go here\n\t})\n\n**Note:** If you are serving static files (e.g. via `express.static`), make sure, that authentication is added afterwards.\nAlso you should make sure, that the router is added after the authentication module.\n\n## Options\n\nThe second parameter of the `authentication` function is an object with options. Let's assume an application,\nthat delivers `hello world` if the a user has authenticated successfully for the following description. You\nmight want to check the example application under `example/app.js`. My local database has a `root` user \nwithout password.\n\n### Option: `via`\n\n`via` defines, where the module will find the credentials.\n\n#### Credentials in the params (default)\n\n\tauthentication(sequelize, { via: 'params' })\n\nThis will tell the module, that the credentials are either in the URL of the request or the body (POST).\nIf you don't want to use headers, this is most likely what you want.\n\n\tcurl \"http://localhost:3000?user=root&password=\"\n\t# => hello world\n\n\tcurl \"http://localhost:3000?user=root&password=fnord\"\n\t# => Unauthorized\n\t\n\tcurl -d \"user=root&password=\" \"http://localhost:3000\"\n\t# => hello world\n\n\tcurl -d \"user=root&password=fnord\" \"http://localhost:3000\"\n\t# => Unauthorized\n\n#### Credentials in the headers\n\n\tauthentication(sequelize, { via: 'headers' })\n\nThis defines, that the credentials are in the headers of the request.\n\n\tcurl \"http://localhost:3000?user=root&password=\"\n\t# => Unauthorized\n\n\tcurl \"http://localhost:3000?user=root&password=fnord\"\n\t# => Unauthorized\n\t\n\tcurl -d \"user=root&password=\" \"http://localhost:3000\"\n\t# => Unauthorized\n\t\n\tcurl -d \"user=root&password=fnord\" \"http://localhost:3000\"\n\t# => Unauthorized\n\t\n\tcurl -H \"user: root\" -H \"password: \" http://localhost:3000\n\t# => hello world\n\t\n\tcurl -H \"user: root\" -H \"password: fnord\" http://localhost:3000\n\t# => Unauthorized\n\n#### Credentials in the URL\n\n\tauthentication(sequelize, { via: 'query' })\n\nCredentials are in the URL of the request only.\n\n\tcurl \"http://localhost:3000?user=root&password=\"\n\t# => hello world\n\t\n\tcurl \"http://localhost:3000?user=root&password=fnord\"\n\t# => Unauthorized\n\t\n\tcurl -d \"user=root&password=\" \"http://localhost:3000\"\n\t# => Unauthorized\n\n\tcurl -d \"user=root&password=fnord\" \"http://localhost:3000\"\n\t# => Unauthorized\n\n#### Credentials in the post body\n\n\tauthentication(sequelize, { via: 'body' })\n\nCredentials are in the body of the request only.\n\n\tcurl \"http://localhost:3000?user=root&password=\"\n\t# => Unauthorized\n\t\n\tcurl \"http://localhost:3000?user=root&password=fnord\"\n\t# => Unauthorized\n\t\n\tcurl -d \"user=root&password=\" \"http://localhost:3000\"\n\t# => hello world\n\t\n\tcurl -d \"user=root&password=fnord\" \"http://localhost:3000\"\n\t# => Unauthorized\n\n### Option: `scope`\n\n`scope` defines, which urls should receive protection via the module.\n\n\tauthentication(sequelize, { scope: '/api' })\n\nThis will protect each url that starts with `/api`.\n\n\tcurl http://localhost:3000\n\t# => hello world\n\t\n\tcurl http://localhost:3000/api/secret\n\t# => Unauthorized\n\n\tcurl http://localhost:3000/api/secret?user=root&password=\n\t# => hello world\n\n### Option: `param`\n\n`param` defines a parameter name which scopes the credentials. The default is none.\n\n\tauthentication(sequelize, { param: 'credentials' })\n\nThe module will now check, if the credentials are located in the credentials object.\n\n\tcurl \"http://localhost:3000?credentials\\[user\\]=root&credentials\\[password\\]=\"\n\t# => hello world\n\n## Hm? So, what's next?\n\nThe server will send each request through the authentication module. If the request authenticates correctly, it will be passed to the router. If authentication fails, the module will response with a 401 and the message 'Unauthorized'.\n\n## License\nHereby placed under MIT license.\n",
  "_id": "sequelize-authentication@0.3.0",
  "dist": {
    "shasum": "59783e0f8c5a40b51fb0278292a3e94421d2b521",
    "tarball": "https://registry.npmjs.org/sequelize-authentication/-/sequelize-authentication-0.3.0.tgz"
  },
  "_npmVersion": "1.1.66",
  "_npmUser": {
    "name": "sdepold",
    "email": "sascha@depold.com"
  },
  "maintainers": [
    {
      "name": "sdepold",
      "email": "sascha@depold.com"
    }
  ],
  "directories": {},
  "_shasum": "59783e0f8c5a40b51fb0278292a3e94421d2b521",
  "_resolved": "https://registry.npmjs.org/sequelize-authentication/-/sequelize-authentication-0.3.0.tgz",
  "_from": "sequelize-authentication@latest"
}
